import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

dotenv.config();

class QuizAIService {
  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is required for AI quiz generation');
    }

    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
  }

  // Generate finance quiz questions using AI
  async generateQuizQuestions(options = {}) {
    const {
      count = 5,
      difficulty = 'beginner',
      category = 'general',
      language = 'english'
    } = options;

    try {
      const prompt = this.buildQuestionPrompt(count, difficulty, category, language);

      const result = await this.model.generateContent(prompt);
      const response = result.response;
      const text = response.text();

      // Parse the AI response to extract questions
      const questions = this.parseAIResponse(text);

      if (questions.length === 0) {
        throw new Error('No valid questions generated by AI');
      }

      return questions;
    } catch (error) {
      console.error('Error generating quiz questions with AI:', error);
      throw error;
    }
  }

  // Build the prompt for AI question generation
  buildQuestionPrompt(count, difficulty, category, language) {
    const difficultyDescriptions = {
      beginner: 'basic concepts that a rural person with minimal financial knowledge can understand',
      intermediate: 'moderate complexity requiring some financial literacy',
      advanced: 'complex financial concepts requiring good understanding'
    };

    const categoryContexts = {
      savings: 'saving money, bank accounts, and building emergency funds',
      loans: 'borrowing money, interest rates, and loan management',
      insurance: 'protecting assets and health through insurance',
      'government schemes': 'Indian government welfare programs and benefits',
      budgeting: 'managing household expenses and income planning',
      investments: 'growing money through various investment options',
      general: 'general financial literacy and money management'
    };

    const languageInstructions = {
      hindi: 'Generate questions in Hindi (Devanagari script). Use simple, clear language suitable for rural Indian audiences.',
      english: 'Generate questions in clear, simple English suitable for Indian users. Use vocabulary that is easy to understand.',
      hinglish: 'Generate questions mixing Hindi and English as commonly used in India.'
    };

    return `
You are a financial literacy expert creating quiz questions for rural Indian users learning about money management.

Requirements:
- Generate exactly ${count} multiple-choice questions
- Difficulty level: ${difficulty} (${difficultyDescriptions[difficulty]})
- Topic focus: ${category} (${categoryContexts[category] || 'general financial literacy'})
- ${languageInstructions[language]}
- Each question should have 4 options with only one correct answer
- Include practical, real-world scenarios relevant to rural India
- Questions should be culturally appropriate and relatable
- Include brief explanations for correct answers

Context for questions:
- Target audience: Indian users with basic to intermediate education
- Economic context: Lower to middle-income families
- Cultural context: Traditional Indian family structures and values
- Practical focus: Day-to-day financial decisions and government schemes
- Language: Use simple, clear English that can be easily translated

Format your response as a JSON array with this exact structure:
[
  {
    "question": "Question text here",
    "options": ["Option 1", "Option 2", "Option 3", "Option 4"],
    "correctAnswer": 0,
    "explanation": "Brief explanation of why this answer is correct",
    "difficulty": "${difficulty}",
    "category": "${category}"
  }
]

Important:
- correctAnswer should be the index (0-3) of the correct option
- Keep questions practical and relevant to Indian life
- Use simple English that's easy to understand and translate
- Include specific Indian currency amounts and schemes where appropriate
- Make sure all questions are factually accurate
- Avoid complex financial jargon - use everyday terms

Generate the questions now:`;
  }

  // Parse AI response and extract structured questions
  parseAIResponse(aiResponse) {
    try {
      // Clean the response to extract JSON
      let jsonText = aiResponse.trim();

      // Remove markdown code blocks if present
      jsonText = jsonText.replace(/```json\n?/, '').replace(/\n?```/, '');

      // Try to find JSON array in the response
      const jsonMatch = jsonText.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        jsonText = jsonMatch[0];
      }

      const questions = JSON.parse(jsonText);

      // Validate and format questions
      return questions
        .filter(this.validateQuestion)
        .map((q, index) => ({
          id: `ai_${Date.now()}_${index}`,
          question: q.question,
          options: q.options,
          correctAnswer: q.correctAnswer,
          difficulty: q.difficulty,
          category: q.category,
          explanation: q.explanation
        }));
    } catch (error) {
      console.error('Error parsing AI response:', error);
      console.log('Raw AI response:', aiResponse);

      // Return empty array if parsing fails
      return [];
    }
  }

  // Validate individual question structure
  validateQuestion(question) {
    return (
      question &&
      typeof question.question === 'string' &&
      Array.isArray(question.options) &&
      question.options.length === 4 &&
      typeof question.correctAnswer === 'number' &&
      question.correctAnswer >= 0 &&
      question.correctAnswer <= 3 &&
      typeof question.explanation === 'string' &&
      question.question.trim().length > 0 &&
      question.options.every(option => typeof option === 'string' && option.trim().length > 0)
    );
  }

  // Generate questions for specific user context
  async generatePersonalizedQuestions(userProfile, options = {}) {
    const personalizedOptions = {
      ...options,
      // Adjust difficulty based on user's quiz history
      difficulty: this.adjustDifficultyForUser(userProfile),
      // Focus on categories where user needs improvement
      category: this.selectCategoryForUser(userProfile)
    };

    return this.generateQuizQuestions(personalizedOptions);
  }

  // Adjust difficulty based on user performance
  adjustDifficultyForUser(userProfile) {
    const { averageScore = 0, quizzesCompleted = 0 } = userProfile;

    if (quizzesCompleted === 0) {
      return 'beginner';
    }

    if (averageScore >= 80) {
      return 'advanced';
    } else if (averageScore >= 60) {
      return 'intermediate';
    } else {
      return 'beginner';
    }
  }

  // Select category based on user's weak areas
  selectCategoryForUser(userProfile) {
    // This could be enhanced with category-wise performance tracking
    const categories = ['savings', 'loans', 'insurance', 'government schemes', 'budgeting'];
    return categories[Math.floor(Math.random() * categories.length)];
  }

  // Get AI explanation for incorrect answers
  async getAnswerExplanation(question, userAnswer, correctAnswer) {
    try {
      const prompt = `
You are a financial literacy tutor explaining why an answer is incorrect.

Question: ${question}
User's Answer: ${userAnswer}
Correct Answer: ${correctAnswer}

Provide a brief, encouraging explanation in simple English suitable for Indian users.
Explain why the correct answer is right and help them understand the concept better.

Keep the explanation under 100 words and be supportive, not judgmental.
Use simple vocabulary that can be easily translated to other languages.
`;

      const result = await this.model.generateContent(prompt);
      const response = result.response;
      return response.text().trim();
    } catch (error) {
      console.error('Error generating answer explanation:', error);
      return 'Learning the correct answer will help you improve. Keep practicing!';
    }
  }

  // Generate motivational message based on quiz performance
  async generateMotivationalMessage(score, totalQuestions) {
    try {
      const percentage = Math.round((score / totalQuestions) * 100);

      const prompt = `
Generate a short, encouraging message for an Indian user who just completed a financial literacy quiz.
Score: ${score}/${totalQuestions} (${percentage}%)

The message should be:
- In simple English
- Encouraging and motivational
- Specific to their performance level
- Include a tip for financial improvement
- Keep it under 50 words
- Use vocabulary that can be easily translated

Be culturally appropriate and supportive.
`;

      const result = await this.model.generateContent(prompt);
      const response = result.response;
      return response.text().trim();
    } catch (error) {
      console.error('Error generating motivational message:', error);
      return 'Great job! Keep building your financial knowledge. Every small saving matters!';
    }
  }
}

export default new QuizAIService();